// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int          @id @default(autoincrement())
  username  String       @unique
  email     String       @unique
  weight    Int?         // Optional field
  age       Int?         // Optional field
  height    Int?         // Optional field
  gender    String?      // Optional field
  password  String
  role      String       @default("user")

  workoutPlans WorkoutPlan[] // A user can have many workout plans, no foreign key in User
}

model WorkoutPlan {
  id          Int                   @id @default(autoincrement())
  name        String
  description String
  userId      Int                   // Foreign key to User (in WorkoutPlan, not User)
  user        User                  @relation(fields: [userId], references: [id]) // This creates the relation with User
  exercises   WorkoutPlanExercise[] // Many-to-many relation with exercises
}

model WorkoutPlanExercise {
  id           Int        @id @default(autoincrement())
  workoutPlanId Int       // Foreign key to WorkoutPlan
  exerciseId    Int       // Foreign key to Exercise
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id])
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
}

model Exercise {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  muscle      String
  equipment   String
  difficulty  String
  instructions String @db.Text
  workoutPlans WorkoutPlanExercise[] // Many-to-many relation with workout plans, no foreign key in Exercise
}

model Feedback {
  id           Int      @id @default(autoincrement())
  feedback_type String
  description  String   @db.Text
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
}


