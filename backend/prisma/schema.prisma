// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  username String
  email    String   @unique
  weight   Decimal  @db.Decimal(5, 2)
  dob      DateTime @default(now())
  height   Int
  gender   String
  password String
  role     String   @default("user")
  image    String?
  otp      String?

  workoutPlans    WorkoutPlan[] // A user can have many workout plans, no foreign key in User
  feedbacks       Feedback[] // A user can have many feedback entries
  workoutProgress WorkoutProgress[]
  Notification    Notification[]
}

model WorkoutPlan {
  id               Int                   @id @default(autoincrement())
  name             String
  createdByAdmin   Boolean               @default(false)
  assignedToUserId Int?
  user             User?                 @relation(fields: [assignedToUserId], references: [id])
  exercises        WorkoutPlanExercise[]
  createdAt        DateTime              @default(now())
  isPinned         Boolean               @default(false)

  workoutProgress WorkoutProgress[]

  @@index([isPinned])
}

model WorkoutPlanExercise {
  id            Int          @id @default(autoincrement())
  workoutPlanId Int
  exerciseId    Int
  workoutPlan   WorkoutPlan  @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade) // ✅ Apply cascade here
  exercise      Exercise     @relation(fields: [exerciseId], references: [id])
  sets          WorkoutSet[]
}

model WorkoutSet {
  id                    Int                 @id @default(autoincrement())
  workoutPlanExerciseId Int
  workoutPlanExercise   WorkoutPlanExercise @relation(fields: [workoutPlanExerciseId], references: [id], onDelete: Cascade) // ✅ Apply cascade here
  reps                  Int
  weight                Float
}

model Exercise {
  id           Int                   @id @default(autoincrement())
  name         String
  type         String
  muscle       String
  equipment    String
  difficulty   String
  category     String                @default("Uncategorized")
  instructions String                @db.Text
  videoUrl     String                @default("https://www.shutterstock.com/shutterstock/videos/3582829621/preview/stock-footage-young-man-doing-weightlifting-exercises-dumbbells-bench-press-in-gym.webm")
  workoutPlans WorkoutPlanExercise[] // Many-to-many relation with workout plans
}

model Feedback {
  id            Int      @id @default(autoincrement())
  feedback_type String
  description   String   @db.Text
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
}

model WorkoutProgress {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade) // Each progress belongs to a user
  workoutPlanId Int
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade) // Reference the workout plan
  completedAt   DateTime    @default(now()) // Stores the date when the workout was completed
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  message     String
  createdAt   DateTime  @default(now())
  scheduledAt DateTime? 
  isSent      Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
}

